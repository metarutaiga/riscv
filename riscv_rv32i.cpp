//==============================================================================
// The RISC-V Instruction Set Manual
// Volume I: Unprivileged ISA
// Document Version 20191213
// December 13, 2019
//==============================================================================

#include "riscv_cpu.h"

//------------------------------------------------------------------------------
void riscv_cpu::LUI()
{
    x[rd] = simmU() << 12;
}
//------------------------------------------------------------------------------
void riscv_cpu::AUIPC()
{
    x[rd] = pc + (simmU() << 12);
}
//------------------------------------------------------------------------------
void riscv_cpu::JAL()
{
    if (rd != 0)
    {
        x[rd] = pc + 4;
    }
    pc = pc + simmJ();
}
//------------------------------------------------------------------------------
void riscv_cpu::JALR()
{
    if (rd != 0)
    {
        x[rd] = pc + 4;
    }
    pc = x[rs1] + simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::BEQ()
{
    if (x[rs1] == x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BNE()
{
    if (x[rs1] != x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BLT()
{
    if ((intptr_t)x[rs1] < (intptr_t)x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BGE()
{
    if ((intptr_t)x[rs1] >= (intptr_t)x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BLTU()
{
    if (x[rs1] < x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BGEU()
{
    if (x[rs1] >= x[rs2])
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::LB()
{
    x[rd] = *(int8_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LH()
{
    x[rd] = *(int16_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LW()
{
    x[rd] = *(int32_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LBU()
{
    x[rd] = *(uint8_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LHU()
{
    x[rd] = *(uint16_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::SB()
{
    *(uint8_t*)(x[rs1] + simmI()) = (uint8_t)x[rs2];
}
//-----------------------------------------------------------------------------
void riscv_cpu::SH()
{
    *(uint16_t*)(x[rs1] + simmI()) = (uint16_t)x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SW()
{
    *(uint32_t*)(x[rs1] + simmI()) = (uint32_t)x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::ADDI()
{
    x[rd] = x[rs1] + simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTI()
{
    x[rd] = (intptr_t)x[rs1] < simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTIU()
{
    x[rd] = x[rs1] < immI();
}
//------------------------------------------------------------------------------
void riscv_cpu::XORI()
{
    x[rd] = x[rs1] ^ simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ORI()
{
    x[rd] = x[rs1] | simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ANDI()
{
    x[rd] = x[rs1] & simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLLI()
{
    x[rd] = x[rs1] << simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SRLI()
{
    x[rd] = x[rs1] >> simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SRAI()
{
    x[rd] = (intptr_t)x[rs1] >> simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ADD()
{
    x[rd] = x[rs1] + x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SUB()
{
    x[rd] = x[rs1] - x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SLL()
{
    x[rd] = x[rs1] << x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SLT()
{
    x[rd] = (intptr_t)x[rs1] < (intptr_t)x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTU()
{
    x[rd] = x[rs1] < x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::XOR()
{
    x[rd] = x[rs1] ^ x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SRL()
{
    x[rd] = x[rs1] >> x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SRA()
{
    x[rd] = (intptr_t)x[rs1] >> x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::OR()
{
    x[rd] = x[rs1] | x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::AND()
{
    x[rd] = x[rs1] & x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::FENCE()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::ECALL()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::EBREAK()
{
    
}
//------------------------------------------------------------------------------
