//==============================================================================
// The RISC-V Instruction Set Manual
// Volume I: Unprivileged ISA
// Document Version 20191213
// December 13, 2019
//==============================================================================

#include "riscv_cpu.h"

//------------------------------------------------------------------------------
void riscv_cpu::LUI()
{
    x[rd] = simmU();
}
//------------------------------------------------------------------------------
void riscv_cpu::AUIPC()
{
    x[rd] = pc + simmU();
}
//------------------------------------------------------------------------------
void riscv_cpu::JAL()
{
    uintptr_t base = pc;
    x[rd] = pc + 4;
    pc = base + simmJ();
}
//------------------------------------------------------------------------------
void riscv_cpu::JALR()
{
    uintptr_t base = x[rs1];
    x[rd] = pc + 4;
    pc = base + simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::BEQ()
{
    if (x[rs1].u == x[rs2].u)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BNE()
{
    if (x[rs1].u != x[rs2].u)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BLT()
{
    if (x[rs1].s < x[rs2].s)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BGE()
{
    if (x[rs1].s >= x[rs2].s)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BLTU()
{
    if (x[rs1].u < x[rs2].u)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::BGEU()
{
    if (x[rs1].u >= x[rs2].u)
    {
        pc = pc + simmB();
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::LB()
{
    x[rd] = *(int8_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LH()
{
    x[rd] = *(int16_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LW()
{
    x[rd] = *(int32_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LBU()
{
    x[rd] = *(uint8_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::LHU()
{
    x[rd] = *(uint16_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::SB()
{
    *(uint8_t*)(x[rs1] + simmI()) = x[rs2].u8;
}
//-----------------------------------------------------------------------------
void riscv_cpu::SH()
{
    *(uint16_t*)(x[rs1] + simmI()) = x[rs2].u16;
}
//------------------------------------------------------------------------------
void riscv_cpu::SW()
{
    *(uint32_t*)(x[rs1] + simmI()) = x[rs2].u32;
}
//------------------------------------------------------------------------------
void riscv_cpu::ADDI()
{
    x[rd] = x[rs1] + simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTI()
{
    x[rd] = x[rs1].s < simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTIU()
{
    x[rd] = x[rs1].u < (uintptr_t)simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::XORI()
{
    x[rd] = x[rs1] ^ simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ORI()
{
    x[rd] = x[rs1] | simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ANDI()
{
    x[rd] = x[rs1] & simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SLLI()
{
    x[rd] = x[rs1].u << simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SRLI()
{
    x[rd] = x[rs1].u >> simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::SRAI()
{
    x[rd] = x[rs1].s >> simmI();
}
//------------------------------------------------------------------------------
void riscv_cpu::ADD()
{
    x[rd] = x[rs1] + x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SUB()
{
    x[rd] = x[rs1] - x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SLL()
{
    x[rd] = x[rs1].u << x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SLT()
{
    x[rd] = x[rs1].s < x[rs2].s;
}
//------------------------------------------------------------------------------
void riscv_cpu::SLTU()
{
    x[rd] = x[rs1].u < x[rs2].u;
}
//------------------------------------------------------------------------------
void riscv_cpu::XOR()
{
    x[rd] = x[rs1] ^ x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SRL()
{
    x[rd] = x[rs1].u >> x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::SRA()
{
    x[rd] = x[rs1].s >> x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::OR()
{
    x[rd] = x[rs1] | x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::AND()
{
    x[rd] = x[rs1] & x[rs2];
}
//------------------------------------------------------------------------------
void riscv_cpu::FENCE()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::ECALL()
{
    environmentCall(*this);
}
//------------------------------------------------------------------------------
void riscv_cpu::EBREAK()
{
    environmentBreakpoint(*this);
}
//------------------------------------------------------------------------------
