//==============================================================================
// The RISC-V Instruction Set Manual
// Volume I: Unprivileged ISA
// Document Version 20191213
// December 13, 2019
//==============================================================================

#include <math.h>
#include <float.h>
#include "riscv_cpu.h"

//------------------------------------------------------------------------------
void riscv_cpu::FLW()
{
    f[rd].f = *(float32_t*)(x[rs1] + simmI());
}
//------------------------------------------------------------------------------
void riscv_cpu::FSW()
{
    *(float32_t*)(x[rs1] + simmS()) = f[rs2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FMADD_S()
{
    f[rd].f = (f[rs1].f * f[rs2].f) + f[funct7 >> 2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FMSUB_S()
{
    f[rd].f = (f[rs1].f * f[rs2].f) - f[funct7 >> 2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FNMSUB_S()
{
    f[rd].f = -(f[rs1].f * f[rs2].f) + f[funct7 >> 2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FNMADD_S()
{
    f[rd].f = -(f[rs1].f * f[rs2].f) - f[funct7 >> 2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FADD_S()
{
    f[rd].f = f[rs1].f + f[rs2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FSUB_S()
{
    f[rd].f = f[rs1].f - f[rs2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FMUL_S()
{
    f[rd].f = f[rs1].f * f[rs2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FDIV_S()
{
    f[rd].f = f[rs1].f / f[rs2].f;
}
//------------------------------------------------------------------------------
void riscv_cpu::FSQRT_S()
{
    f[rd].f = sqrtf(f[rs1].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FSGNJ_S()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::FSGNJN_S()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::FSGNJX_S()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::FMIN_S()
{
    f[rd].f = fminf(f[rs1].f, f[rs2].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FMAX_S()
{
    f[rd].f = fmaxf(f[rs1].f, f[rs2].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FCVT_W_S()
{
    switch (funct3)
    {
    case 0b000:
        x[rd].s = int32_t(lround(f[rs1].f));
        break;
    case 0b001:
        x[rd].s = int32_t(f[rs1].f);
        break;
    case 0b010:
        x[rd].s = int32_t(floorf(f[rs1].f));
        break;
    case 0b011:
        x[rd].s = int32_t(ceilf(f[rs1].f));
        break;
    case 0b100:
        x[rd].s = int32_t(f[rs1].f + 0.5f);
        break;
    case 0b101:
    case 0b110:
        HINT();
        break;
    case 0b111:
        x[rd].s = int32_t(lrintf(f[rs1].f));
        break;
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::FCVT_WU_S()
{
    switch (funct3)
    {
    case 0b000:
        x[rd].u = uint32_t(lround(f[rs1].f));
        break;
    case 0b001:
        x[rd].u = uint32_t(f[rs1].f);
        break;
    case 0b010:
        x[rd].u = uint32_t(floorf(f[rs1].f));
        break;
    case 0b011:
        x[rd].u = uint32_t(ceilf(f[rs1].f));
        break;
    case 0b100:
        x[rd].u = uint32_t(f[rs1].f + 0.5f);
        break;
    case 0b101:
    case 0b110:
        HINT();
        break;
    case 0b111:
        x[rd].u = uint32_t(lrintf(f[rs1].f));
        break;
    }
}
//------------------------------------------------------------------------------
void riscv_cpu::FMV_X_W()
{
    x[rd].s = f[rs1].s32;
}
//------------------------------------------------------------------------------
void riscv_cpu::FEQ_S()
{
    x[rd].u = (f[rs1].f == f[rs2].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FLT_S()
{
    x[rd].u = (f[rs1].f < f[rs2].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FLE_S()
{
    x[rd].u = (f[rs1].f <= f[rs2].f);
}
//------------------------------------------------------------------------------
void riscv_cpu::FCLASS_S()
{
    
}
//------------------------------------------------------------------------------
void riscv_cpu::FCVT_S_W()
{
    f[rd].f = x[rs1].s;
}
//------------------------------------------------------------------------------
void riscv_cpu::FCVT_S_WU()
{
    f[rd].f = x[rs1].u;
}
//------------------------------------------------------------------------------
void riscv_cpu::FMV_W_X()
{
    f[rd].s32 = x[rs1].s32;
}
//------------------------------------------------------------------------------
